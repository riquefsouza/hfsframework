package ${pacote}.view.${objeto};

import java.util.Collections;
import java.util.List;
import java.util.Map;

import org.primefaces.model.LazyDataModel;
import org.primefaces.model.SortOrder;

import br.com.hfsframework.base.BaseLazyModel;
import ${pacote}.business.${classe}BC;
import ${pacote}.model.${classe};

public class ${classe}LazyDataModel extends LazyDataModel<${classe}> {
	
	private static final long serialVersionUID = 1L;

	private BaseLazyModel<${classe}, ${idTipo}, ${classe}BC> baseLazyModel;

	public ${classe}LazyDataModel(${classe}BC bc) {
		super();
		this.baseLazyModel = new BaseLazyModel<${classe}, ${idTipo}, ${classe}BC>(bc);
	}

	@Override
	public ${classe} getRowData(String rowKey) {
		for (${classe} ${objeto} : this.baseLazyModel.getDatasource()) {
			if (${objeto}.getId().toString().equals(rowKey))
				return ${objeto};
		}
		return null;
	}

	@Override
	public Object getRowKey(${classe} ${objeto}) {
		return ${objeto}.getId();
	}

	@Override
	public List<${classe}> load(int first, int pageSize, String sortField, SortOrder sortOrder,
			Map<String, Object> filters) {
		List<${classe}> data = this.baseLazyModel.carregar(first, pageSize, sortField, sortOrder, filters, false);

		// sort
		if (sortField != null) {
			Collections.sort(data, new ${classe}LazySorter(sortField, sortOrder));
		}

		if (filters.keySet().size() > 0 && this.baseLazyModel.isAchou()) {
			this.setRowCount(data.size());
		} else {
			this.setRowCount(this.baseLazyModel.getDataSize());
		}

		return data;
	}
}
